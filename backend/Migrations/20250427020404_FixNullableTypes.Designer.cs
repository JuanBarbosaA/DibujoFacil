// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Repositories.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DbDibujofacilContext))]
    [Migration("20250427020404_FixNullableTypes")]
    partial class FixNullableTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryTutorial", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TutorialsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "TutorialsId");

                    b.HasIndex("TutorialsId");

                    b.ToTable("CategoryTutorial");
                });

            modelBuilder.Entity("backend.Repositories.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int")
                        .HasColumnName("required_points");

                    b.HasKey("Id")
                        .HasName("PK__achievem__3213E83F121C4DCE");

                    b.ToTable("achievement", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("action");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TutorialId")
                        .HasColumnType("int")
                        .HasColumnName("tutorial_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__audit__3213E83FACDD0C31");

                    b.HasIndex("TutorialId");

                    b.HasIndex("UserId");

                    b.ToTable("audit", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__category__3213E83F68DBA026");

                    b.HasIndex(new[] { "Name" }, "UQ__category__72E12F1BDF677F65")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Edited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("edited");

                    b.Property<int>("TutorialId")
                        .HasColumnType("int")
                        .HasColumnName("tutorial_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__comment__3213E83F9DE3DAEF");

                    b.HasIndex("TutorialId");

                    b.HasIndex("UserId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.MinigameDrawing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("json_data");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__minigame__3213E83FEBE879CF");

                    b.HasIndex("UserId");

                    b.ToTable("minigame_drawing", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<bool?>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("read");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__notifica__3213E83F2A5B8F21");

                    b.HasIndex("UserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.OauthProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__oauth_pr__3213E83FF39B442B");

                    b.HasIndex(new[] { "Name" }, "UQ__oauth_pr__72E12F1B0D9ADE5A")
                        .IsUnique();

                    b.ToTable("oauth_provider", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.OauthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("provider_id");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_user_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__oauth_us__3213E83FEC4EEB04");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("oauth_user", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<int>("TutorialId")
                        .HasColumnType("int")
                        .HasColumnName("tutorial_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__rating__3213E83F29C8967F");

                    b.HasIndex("TutorialId");

                    b.HasIndex("UserId");

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__role__3213E83FAB0BD8F0");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.Tutorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Difficulty");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int")
                        .HasColumnName("estimated_duration");

                    b.Property<DateTime?>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("publication_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__tutorial__3213E83F05648820");

                    b.HasIndex("AuthorId");

                    b.ToTable("tutorial", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.TutorialCategory", b =>
                {
                    b.Property<int>("TutorialId")
                        .HasColumnType("int")
                        .HasColumnName("tutorial_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.HasKey("TutorialId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tutorial_category", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.TutorialContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("TutorialId")
                        .HasColumnType("int")
                        .HasColumnName("tutorial_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__tutorial__3213E83F01AF71A0");

                    b.HasIndex("TutorialId");

                    b.ToTable("tutorial_content", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<int?>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__user__3213E83FAD2E384B");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__user__AB6E6164BAB59BC2")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("backend.Repositories.Models.UserAchievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime?>("ObtainedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("obtained_date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "AchievementId")
                        .HasName("PK__user_ach__9A7AA5E75354052F");

                    b.HasIndex("AchievementId");

                    b.ToTable("user_achievement", (string)null);
                });

            modelBuilder.Entity("CategoryTutorial", b =>
                {
                    b.HasOne("backend.Repositories.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Repositories.Models.Tutorial", null)
                        .WithMany()
                        .HasForeignKey("TutorialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Repositories.Models.Audit", b =>
                {
                    b.HasOne("backend.Repositories.Models.Tutorial", "Tutorial")
                        .WithMany("Audits")
                        .HasForeignKey("TutorialId")
                        .IsRequired()
                        .HasConstraintName("FK__audit__tutorial___3B75D760");

                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__audit__user_id__3C69FB99");

                    b.Navigation("Tutorial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.Comment", b =>
                {
                    b.HasOne("backend.Repositories.Models.Tutorial", "Tutorial")
                        .WithMany("Comments")
                        .HasForeignKey("TutorialId")
                        .IsRequired()
                        .HasConstraintName("FK__comment__tutoria__412EB0B6");

                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__comment__user_id__4222D4EF");

                    b.Navigation("Tutorial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.MinigameDrawing", b =>
                {
                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("MinigameDrawings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__minigame___user___45F365D3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.Notification", b =>
                {
                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__notificat__user___4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.OauthUser", b =>
                {
                    b.HasOne("backend.Repositories.Models.OauthProvider", "Provider")
                        .WithMany("OauthUsers")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK__oauth_use__provi__4D94879B");

                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("OauthUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__oauth_use__user___4E88ABD4");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.Rating", b =>
                {
                    b.HasOne("backend.Repositories.Models.Tutorial", "Tutorial")
                        .WithMany("Ratings")
                        .HasForeignKey("TutorialId")
                        .IsRequired()
                        .HasConstraintName("FK__rating__tutorial__52593CB8");

                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__rating__user_id__534D60F1");

                    b.Navigation("Tutorial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.Tutorial", b =>
                {
                    b.HasOne("backend.Repositories.Models.User", "Author")
                        .WithMany("Tutorials")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__tutorial__author__37A5467C");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("backend.Repositories.Models.TutorialCategory", b =>
                {
                    b.HasOne("backend.Repositories.Models.Category", "Category")
                        .WithMany("TutorialCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tutorial_category_category");

                    b.HasOne("backend.Repositories.Models.Tutorial", "Tutorial")
                        .WithMany("TutorialCategories")
                        .HasForeignKey("TutorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tutorial_category_tutorial");

                    b.Navigation("Category");

                    b.Navigation("Tutorial");
                });

            modelBuilder.Entity("backend.Repositories.Models.TutorialContent", b =>
                {
                    b.HasOne("backend.Repositories.Models.Tutorial", "Tutorial")
                        .WithMany("TutorialContents")
                        .HasForeignKey("TutorialId")
                        .IsRequired()
                        .HasConstraintName("FK__tutorial___tutor__59FA5E80");

                    b.Navigation("Tutorial");
                });

            modelBuilder.Entity("backend.Repositories.Models.User", b =>
                {
                    b.HasOne("backend.Repositories.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__user__role_id__2B3F6F97");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("backend.Repositories.Models.UserAchievement", b =>
                {
                    b.HasOne("backend.Repositories.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .IsRequired()
                        .HasConstraintName("FK__user_achi__achie__5EBF139D");

                    b.HasOne("backend.Repositories.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_achi__user___5DCAEF64");

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Repositories.Models.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("backend.Repositories.Models.Category", b =>
                {
                    b.Navigation("TutorialCategories");
                });

            modelBuilder.Entity("backend.Repositories.Models.OauthProvider", b =>
                {
                    b.Navigation("OauthUsers");
                });

            modelBuilder.Entity("backend.Repositories.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("backend.Repositories.Models.Tutorial", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("TutorialCategories");

                    b.Navigation("TutorialContents");
                });

            modelBuilder.Entity("backend.Repositories.Models.User", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Comments");

                    b.Navigation("MinigameDrawings");

                    b.Navigation("Notifications");

                    b.Navigation("OauthUsers");

                    b.Navigation("Ratings");

                    b.Navigation("Tutorials");

                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
